Running all tests
Testing addition
----------------------------------------------------------------------------------------------------
** Testing compilation for 1 + 2
Node Type: PROGRAM
  Node Type: STATEMENT (EXPRESSION_STATEMENT)
    Expression:
      Node Type: EXPRESSION (4)
        Operator: +
        Left:
          Node Type: EXPRESSION (1)
            Integer: 1
        Right:
          Node Type: EXPRESSION (1)
            Integer: 2
Expected instructions:
0000 OP_CONSTANT 0
0003 OP_CONSTANT 1
0006 OP_ADD
0007 OPPOP
Actual instructions:
0000 OP_CONSTANT 0
0003 OP_CONSTANT 1
0006 OP_ADD
0007 OPPOP
* Testing Instructions
* Testing Constant Pool
Testing Integer Object: 1
Testing Integer Object: 2
/home/dgood/Projects/C/compiler/test/compiler_tests.c:1216:test_addition:PASS
Testing multiple expressions
----------------------------------------------------------------------------------------------------
** Testing compilation for 1; 2
Node Type: PROGRAM
  Node Type: STATEMENT (EXPRESSION_STATEMENT)
    Expression:
      Node Type: EXPRESSION (1)
        Integer: 1
  Node Type: STATEMENT (EXPRESSION_STATEMENT)
    Expression:
      Node Type: EXPRESSION (1)
        Integer: 2
Expected instructions:
0000 OP_CONSTANT 0
0003 OPPOP
0004 OP_CONSTANT 1
0007 OPPOP
Actual instructions:
0000 OP_CONSTANT 0
0003 OPPOP
0004 OP_CONSTANT 1
0007 OPPOP
* Testing Instructions
* Testing Constant Pool
Testing Integer Object: 1
Testing Integer Object: 2
/home/dgood/Projects/C/compiler/test/compiler_tests.c:1217:test_multiple_expressions:PASS
Testing subtraction
----------------------------------------------------------------------------------------------------
** Testing compilation for 1 - 2
Node Type: PROGRAM
  Node Type: STATEMENT (EXPRESSION_STATEMENT)
    Expression:
      Node Type: EXPRESSION (4)
        Operator: -
        Left:
          Node Type: EXPRESSION (1)
            Integer: 1
        Right:
          Node Type: EXPRESSION (1)
            Integer: 2
Expected instructions:
0000 OP_CONSTANT 0
0003 OP_CONSTANT 1
0006 OP_SUB
0007 OPPOP
Actual instructions:
0000 OP_CONSTANT 0
0003 OP_CONSTANT 1
0006 OP_SUB
0007 OPPOP
* Testing Instructions
* Testing Constant Pool
Testing Integer Object: 1
Testing Integer Object: 2
/home/dgood/Projects/C/compiler/test/compiler_tests.c:1218:test_subtraction:PASS
Testing multiplication
----------------------------------------------------------------------------------------------------
** Testing compilation for 1 * 2
Node Type: PROGRAM
  Node Type: STATEMENT (EXPRESSION_STATEMENT)
    Expression:
      Node Type: EXPRESSION (4)
        Operator: *
        Left:
          Node Type: EXPRESSION (1)
            Integer: 1
        Right:
          Node Type: EXPRESSION (1)
            Integer: 2
Expected instructions:
0000 OP_CONSTANT 0
0003 OP_CONSTANT 1
0006 OP_MUL
0007 OPPOP
Actual instructions:
0000 OP_CONSTANT 0
0003 OP_CONSTANT 1
0006 OP_MUL
0007 OPPOP
* Testing Instructions
* Testing Constant Pool
Testing Integer Object: 1
Testing Integer Object: 2
/home/dgood/Projects/C/compiler/test/compiler_tests.c:1219:test_multiplication:PASS
Testing division
----------------------------------------------------------------------------------------------------
** Testing compilation for 2 / 1
Node Type: PROGRAM
  Node Type: STATEMENT (EXPRESSION_STATEMENT)
    Expression:
      Node Type: EXPRESSION (4)
        Operator: /
        Left:
          Node Type: EXPRESSION (1)
            Integer: 2
        Right:
          Node Type: EXPRESSION (1)
            Integer: 1
Expected instructions:
0000 OP_CONSTANT 0
0003 OP_CONSTANT 1
0006 OP_DIV
0007 OPPOP
Actual instructions:
0000 OP_CONSTANT 0
0003 OP_CONSTANT 1
0006 OP_DIV
0007 OPPOP
* Testing Instructions
* Testing Constant Pool
Testing Integer Object: 2
Testing Integer Object: 1
/home/dgood/Projects/C/compiler/test/compiler_tests.c:1220:test_division:PASS
Testing negation
----------------------------------------------------------------------------------------------------
** Testing compilation for -1
Node Type: PROGRAM
  Node Type: STATEMENT (EXPRESSION_STATEMENT)
    Expression:
      Node Type: EXPRESSION (3)
        Operator: -
        Right:
          Node Type: EXPRESSION (1)
            Integer: 1
Expected instructions:
0000 OP_CONSTANT 0
0003 OP_MINUS
0004 OPPOP
Actual instructions:
0000 OP_CONSTANT 0
0003 OP_MINUS
0004 OPPOP
* Testing Instructions
* Testing Constant Pool
Testing Integer Object: 1
/home/dgood/Projects/C/compiler/test/compiler_tests.c:1221:test_negation:PASS
Testing boolean expression: true
----------------------------------------------------------------------------------------------------
** Testing compilation for true
Node Type: PROGRAM
  Node Type: STATEMENT (EXPRESSION_STATEMENT)
    Expression:
      Node Type: EXPRESSION (5)
        Boolean: true
Expected instructions:
0000 OP_TRUE
0001 OPPOP
Actual instructions:
0000 OP_TRUE
0001 OPPOP
* Testing Instructions
* Testing Constant Pool
/home/dgood/Projects/C/compiler/test/compiler_tests.c:1222:test_boolean_true:PASS
Testing boolean expression: false
----------------------------------------------------------------------------------------------------
** Testing compilation for false
Node Type: PROGRAM
  Node Type: STATEMENT (EXPRESSION_STATEMENT)
    Expression:
      Node Type: EXPRESSION (5)
        Boolean: false
Expected instructions:
0000 OP_FALSE
0001 OPPOP
Actual instructions:
0000 OP_FALSE
0001 OPPOP
* Testing Instructions
* Testing Constant Pool
/home/dgood/Projects/C/compiler/test/compiler_tests.c:1223:test_boolean_false:PASS
Testing boolean expression: 1 > 2
----------------------------------------------------------------------------------------------------
** Testing compilation for 1 > 2
Node Type: PROGRAM
  Node Type: STATEMENT (EXPRESSION_STATEMENT)
    Expression:
      Node Type: EXPRESSION (4)
        Operator: >
        Left:
          Node Type: EXPRESSION (1)
            Integer: 1
        Right:
          Node Type: EXPRESSION (1)
            Integer: 2
Expected instructions:
0000 OP_CONSTANT 0
0003 OP_CONSTANT 1
0006 OP_GREATER_THAN
0007 OPPOP
Actual instructions:
0000 OP_CONSTANT 0
0003 OP_CONSTANT 1
0006 OP_GREATER_THAN
0007 OPPOP
* Testing Instructions
* Testing Constant Pool
Testing Integer Object: 1
Testing Integer Object: 2
/home/dgood/Projects/C/compiler/test/compiler_tests.c:1224:test_greater_than_expression:PASS
Testing boolean expression: 1 < 2
----------------------------------------------------------------------------------------------------
** Testing compilation for 1 < 2
Node Type: PROGRAM
  Node Type: STATEMENT (EXPRESSION_STATEMENT)
    Expression:
      Node Type: EXPRESSION (4)
        Operator: <
        Left:
          Node Type: EXPRESSION (1)
            Integer: 1
        Right:
          Node Type: EXPRESSION (1)
            Integer: 2
Expected instructions:
0000 OP_CONSTANT 0
0003 OP_CONSTANT 1
0006 OP_GREATER_THAN
0007 OPPOP
Actual instructions:
0000 OP_CONSTANT 0
0003 OP_CONSTANT 1
0006 OP_GREATER_THAN
0007 OPPOP
* Testing Instructions
* Testing Constant Pool
Testing Integer Object: 2
Testing Integer Object: 1
/home/dgood/Projects/C/compiler/test/compiler_tests.c:1225:test_less_than_expression:PASS
Testing boolean expression: 1 == 2
----------------------------------------------------------------------------------------------------
** Testing compilation for 1 == 2
Node Type: PROGRAM
  Node Type: STATEMENT (EXPRESSION_STATEMENT)
    Expression:
      Node Type: EXPRESSION (4)
        Operator: ==
        Left:
          Node Type: EXPRESSION (1)
            Integer: 1
        Right:
          Node Type: EXPRESSION (1)
            Integer: 2
Expected instructions:
0000 OP_CONSTANT 0
0003 OP_CONSTANT 1
0006 OP_EQUAL
0007 OPPOP
Actual instructions:
0000 OP_CONSTANT 0
0003 OP_CONSTANT 1
0006 OP_EQUAL
0007 OPPOP
* Testing Instructions
* Testing Constant Pool
Testing Integer Object: 1
Testing Integer Object: 2
/home/dgood/Projects/C/compiler/test/compiler_tests.c:1226:test_equal_expression:PASS
Testing boolean expression: 1 != 2
----------------------------------------------------------------------------------------------------
** Testing compilation for 1 != 2
Node Type: PROGRAM
  Node Type: STATEMENT (EXPRESSION_STATEMENT)
    Expression:
      Node Type: EXPRESSION (4)
        Operator: !=
        Left:
          Node Type: EXPRESSION (1)
            Integer: 1
        Right:
          Node Type: EXPRESSION (1)
            Integer: 2
Expected instructions:
0000 OP_CONSTANT 0
0003 OP_CONSTANT 1
0006 OP_NOT_EQUAL
0007 OPPOP
Actual instructions:
0000 OP_CONSTANT 0
0003 OP_CONSTANT 1
0006 OP_NOT_EQUAL
0007 OPPOP
* Testing Instructions
* Testing Constant Pool
Testing Integer Object: 1
Testing Integer Object: 2
/home/dgood/Projects/C/compiler/test/compiler_tests.c:1227:test_not_equal_expression:PASS
Testing boolean expression: true == true
----------------------------------------------------------------------------------------------------
** Testing compilation for true == true
Node Type: PROGRAM
  Node Type: STATEMENT (EXPRESSION_STATEMENT)
    Expression:
      Node Type: EXPRESSION (4)
        Operator: ==
        Left:
          Node Type: EXPRESSION (5)
            Boolean: true
        Right:
          Node Type: EXPRESSION (5)
            Boolean: true
Expected instructions:
0000 OP_TRUE
0001 OP_TRUE
0002 OP_EQUAL
0003 OPPOP
Actual instructions:
0000 OP_TRUE
0001 OP_TRUE
0002 OP_EQUAL
0003 OPPOP
* Testing Instructions
* Testing Constant Pool
/home/dgood/Projects/C/compiler/test/compiler_tests.c:1228:test_true_equals_true:PASS
Testing boolean expression: true != false
----------------------------------------------------------------------------------------------------
** Testing compilation for true != false
Node Type: PROGRAM
  Node Type: STATEMENT (EXPRESSION_STATEMENT)
    Expression:
      Node Type: EXPRESSION (4)
        Operator: !=
        Left:
          Node Type: EXPRESSION (5)
            Boolean: true
        Right:
          Node Type: EXPRESSION (5)
            Boolean: false
Expected instructions:
0000 OP_TRUE
0001 OP_FALSE
0002 OP_NOT_EQUAL
0003 OPPOP
Actual instructions:
0000 OP_TRUE
0001 OP_FALSE
0002 OP_NOT_EQUAL
0003 OPPOP
* Testing Instructions
* Testing Constant Pool
/home/dgood/Projects/C/compiler/test/compiler_tests.c:1229:test_true_not_equal_false:PASS
Testing boolean expression: !true
----------------------------------------------------------------------------------------------------
** Testing compilation for !true
Node Type: PROGRAM
  Node Type: STATEMENT (EXPRESSION_STATEMENT)
    Expression:
      Node Type: EXPRESSION (3)
        Operator: !
        Right:
          Node Type: EXPRESSION (5)
            Boolean: true
Expected instructions:
0000 OP_TRUE
0001 OP_BANG
0002 OPPOP
Actual instructions:
0000 OP_TRUE
0001 OP_BANG
0002 OPPOP
* Testing Instructions
* Testing Constant Pool
/home/dgood/Projects/C/compiler/test/compiler_tests.c:1230:test_bang_operator:PASS
Testing conditional: if (true) {10}; 3333;
----------------------------------------------------------------------------------------------------
** Testing compilation for if (true) {10}; 3333;
Node Type: PROGRAM
  Node Type: STATEMENT (EXPRESSION_STATEMENT)
    Expression:
      Node Type: EXPRESSION (6)
        IF_EXPRESSION: {
          Condition:           Node Type: EXPRESSION (5)
            Boolean: true
  Consequence:
  Node Type:   Unknown node type: 7898464
        }
  Node Type: STATEMENT (EXPRESSION_STATEMENT)
    Expression:
      Node Type: EXPRESSION (1)
        Integer: 3333
Expected instructions:
0000 OP_TRUE
0001 OP_JUMP_NOT_TRUTHY 10
0004 OP_CONSTANT 0
0007 OP_JUMP 11
0010 OP_NULL
0011 OPPOP
0012 OP_CONSTANT 1
0015 OPPOP
Actual instructions:
0000 OP_TRUE
0001 OP_JUMP_NOT_TRUTHY 10
0004 OP_CONSTANT 0
0007 OP_JUMP 11
0010 OP_NULL
0011 OPPOP
0012 OP_CONSTANT 1
0015 OPPOP
* Testing Instructions
* Testing Constant Pool
Testing Integer Object: 10
Testing Integer Object: 3333
/home/dgood/Projects/C/compiler/test/compiler_tests.c:1231:test_if_true_then_block:PASS
Testing conditional: if (true) {10} else {20}; 3333;
----------------------------------------------------------------------------------------------------
** Testing compilation for if (true) {10} else {20}; 3333;
Node Type: PROGRAM
  Node Type: STATEMENT (EXPRESSION_STATEMENT)
    Expression:
      Node Type: EXPRESSION (6)
        IF_EXPRESSION: {
          Condition:           Node Type: EXPRESSION (5)
            Boolean: true
  Consequence:
  Node Type:   Unknown node type: 7903824
          Alternative:
  Node Type:   Unknown node type: 7899376
        }
  Node Type: STATEMENT (EXPRESSION_STATEMENT)
    Expression:
      Node Type: EXPRESSION (1)
        Integer: 3333
Expected instructions:
0000 OP_TRUE
0001 OP_JUMP_NOT_TRUTHY 10
0004 OP_CONSTANT 0
0007 OP_JUMP 13
0010 OP_CONSTANT 1
0013 OPPOP
0014 OP_CONSTANT 2
0017 OPPOP
Actual instructions:
0000 OP_TRUE
0001 OP_JUMP_NOT_TRUTHY 10
0004 OP_CONSTANT 0
0007 OP_JUMP 13
0010 OP_CONSTANT 1
0013 OPPOP
0014 OP_CONSTANT 2
0017 OPPOP
* Testing Instructions
* Testing Constant Pool
Testing Integer Object: 10
Testing Integer Object: 20
Testing Integer Object: 3333
/home/dgood/Projects/C/compiler/test/compiler_tests.c:1232:test_if_true_else_block:PASS
Testing global let statements: let one = 1; let two = 2;
----------------------------------------------------------------------------------------------------
** Testing compilation for let one = 1; let two = 2;
Node Type: PROGRAM
  Node Type: STATEMENT (LET_STATEMENT)
    Name:
      Node Type: EXPRESSION (0)
        Identifier: one
    Value:
      Node Type: EXPRESSION (1)
        Integer: 1
  Node Type: STATEMENT (LET_STATEMENT)
    Name:
      Node Type: EXPRESSION (0)
        Identifier: two
    Value:
      Node Type: EXPRESSION (1)
        Integer: 2
Expected instructions:
0000 OP_CONSTANT 0
0003 OP_SET_GLOBAL 0
0006 OP_CONSTANT 1
0009 OP_SET_GLOBAL 1
Actual instructions:
0000 OP_CONSTANT 0
0003 OP_SET_GLOBAL 0
0006 OP_CONSTANT 1
0009 OP_SET_GLOBAL 1
* Testing Instructions
* Testing Constant Pool
Testing Integer Object: 1
Testing Integer Object: 2
/home/dgood/Projects/C/compiler/test/compiler_tests.c:1233:test_multiple_global_let_statements:PASS
Testing global let and usage: let one = 1; one;
----------------------------------------------------------------------------------------------------
** Testing compilation for let one = 1; one;
Node Type: PROGRAM
  Node Type: STATEMENT (LET_STATEMENT)
    Name:
      Node Type: EXPRESSION (0)
        Identifier: one
    Value:
      Node Type: EXPRESSION (1)
        Integer: 1
  Node Type: STATEMENT (EXPRESSION_STATEMENT)
    Expression:
      Node Type: EXPRESSION (0)
        Identifier: one
Expected instructions:
0000 OP_CONSTANT 0
0003 OP_SET_GLOBAL 0
0006 OP_GET_GLOBAL 0
0009 OPPOP
Actual instructions:
0000 OP_CONSTANT 0
0003 OP_SET_GLOBAL 0
0006 OP_GET_GLOBAL 0
0009 OPPOP
* Testing Instructions
* Testing Constant Pool
Testing Integer Object: 1
/home/dgood/Projects/C/compiler/test/compiler_tests.c:1234:test_global_let_and_usage:PASS
Testing string expression: "Lorem Ipsum"
----------------------------------------------------------------------------------------------------
** Testing compilation for "Lorem Ipsum"
Node Type: PROGRAM
  Node Type: STATEMENT (EXPRESSION_STATEMENT)
    Expression:
      Node Type: EXPRESSION (2)
        String: Lorem Ipsum
Expected instructions:
0000 OP_CONSTANT 0
0003 OPPOP
Actual instructions:
0000 OP_CONSTANT 0
0003 OPPOP
* Testing Instructions
* Testing Constant Pool
Testing Integer Object: Lorem 
/home/dgood/Projects/C/compiler/test/compiler_tests.c:33:test_single_string_expression:FAIL: Expected 11 Was 6
Testing string expression: "Lorem" + " Ipsum"
----------------------------------------------------------------------------------------------------
** Testing compilation for "Lorem" + " Ipsum"
Node Type: PROGRAM
  Node Type: STATEMENT (EXPRESSION_STATEMENT)
    Expression:
      Node Type: EXPRESSION (4)
        Operator: +
        Left:
          Node Type: EXPRESSION (2)
            String: Lorem
        Right:
          Node Type: EXPRESSION (2)
            String:  Ipsum
Expected instructions:
0000 OP_CONSTANT 0
0003 OP_CONSTANT 1
0006 OP_ADD
0007 OPPOP
Actual instructions:
0000 OP_CONSTANT 0
0003 OP_CONSTANT 1
0006 OP_ADD
0007 OPPOP
* Testing Instructions
* Testing Constant Pool
Testing Integer Object: Lorem
Testing Integer Object:  Ipsum
/home/dgood/Projects/C/compiler/test/compiler_tests.c:1236:test_string_concatenation_expression:PASS
Testing empty array literal: []
----------------------------------------------------------------------------------------------------
** Testing compilation for []
Node Type: PROGRAM
  Node Type: STATEMENT (EXPRESSION_STATEMENT)
    Expression:
      Node Type: EXPRESSION (9)
        ARRAY_LITERAL: [        ]
Expected instructions:
0000 OP_ARRAY 0
0003 OPPOP
Actual instructions:
0000 OP_ARRAY 0
0003 OPPOP
* Testing Instructions
* Testing Constant Pool
/home/dgood/Projects/C/compiler/test/compiler_tests.c:1237:test_empty_array_literal:PASS
Testing array literal with constants: [1, 2, 3]
----------------------------------------------------------------------------------------------------
** Testing compilation for [1, 2, 3]
Node Type: PROGRAM
  Node Type: STATEMENT (EXPRESSION_STATEMENT)
    Expression:
      Node Type: EXPRESSION (9)
        ARRAY_LITERAL: [          Node Type: EXPRESSION (1)
            Integer: 1
        ,           Node Type: EXPRESSION (1)
            Integer: 2
        ,           Node Type: EXPRESSION (1)
            Integer: 3
        ]
Expected instructions:
0000 OP_CONSTANT 0
0003 OP_CONSTANT 1
0006 OP_CONSTANT 2
0009 OP_ARRAY 3
0012 OPPOP
Actual instructions:
0000 OP_CONSTANT 0
0003 OP_CONSTANT 1
0006 OP_CONSTANT 2
0009 OP_ARRAY 3
0012 OPPOP
* Testing Instructions
* Testing Constant Pool
Testing Integer Object: 1
Testing Integer Object: 2
Testing Integer Object: 3
/home/dgood/Projects/C/compiler/test/compiler_tests.c:1238:test_array_literal_with_constants:PASS
Testing array literal with expressions: [1 + 2, 3 - 4, 5 * 6]
----------------------------------------------------------------------------------------------------
** Testing compilation for [1 + 2, 3 - 4, 5 * 6]
Node Type: PROGRAM
  Node Type: STATEMENT (EXPRESSION_STATEMENT)
    Expression:
      Node Type: EXPRESSION (9)
        ARRAY_LITERAL: [          Node Type: EXPRESSION (4)
            Operator: +
            Left:
              Node Type: EXPRESSION (1)
                Integer: 1
            Right:
              Node Type: EXPRESSION (1)
                Integer: 2
        ,           Node Type: EXPRESSION (4)
            Operator: -
            Left:
              Node Type: EXPRESSION (1)
                Integer: 3
            Right:
              Node Type: EXPRESSION (1)
                Integer: 4
        ,           Node Type: EXPRESSION (4)
            Operator: *
            Left:
              Node Type: EXPRESSION (1)
                Integer: 5
            Right:
              Node Type: EXPRESSION (1)
                Integer: 6
        ]
Expected instructions:
0000 OP_CONSTANT 0
0003 OP_CONSTANT 1
0006 OP_ADD
0007 OP_CONSTANT 2
0010 OP_CONSTANT 3
0013 OP_SUB
0014 OP_CONSTANT 4
0017 OP_CONSTANT 5
0020 OP_MUL
0021 OP_ARRAY 3
0024 OPPOP
Actual instructions:
0000 OP_CONSTANT 0
0003 OP_CONSTANT 1
0006 OP_ADD
0007 OP_CONSTANT 2
0010 OP_CONSTANT 3
0013 OP_SUB
0014 OP_CONSTANT 4
0017 OP_CONSTANT 5
0020 OP_MUL
0021 OP_ARRAY 3
0024 OPPOP
* Testing Instructions
* Testing Constant Pool
Testing Integer Object: 1
Testing Integer Object: 2
Testing Integer Object: 3
Testing Integer Object: 4
Testing Integer Object: 5
Testing Integer Object: 6
/home/dgood/Projects/C/compiler/test/compiler_tests.c:1239:test_array_literal_with_expressions:PASS
Testing empty hash literal: {}
----------------------------------------------------------------------------------------------------
** Testing compilation for {}
Node Type: PROGRAM
  Node Type: STATEMENT (EXPRESSION_STATEMENT)
    Expression:
      Node Type: EXPRESSION (11)
        HASH_LITERAL: {
        }
Expected instructions:
0000 OP_HASH 0
0003 OPPOP
Actual instructions:
0000 OP_HASH 0
0003 OPPOP
* Testing Instructions
* Testing Constant Pool
/home/dgood/Projects/C/compiler/test/compiler_tests.c:1240:test_empty_hash_literal:PASS
Testing hash literal with constants: {1: 2, 3: 4, 5: 6}
----------------------------------------------------------------------------------------------------
** Testing compilation for {1: 2, 3: 4, 5: 6}
Node Type: PROGRAM
  Node Type: STATEMENT (EXPRESSION_STATEMENT)
    Expression:
      Node Type: EXPRESSION (11)
        HASH_LITERAL: {
          Node Type: EXPRESSION (1)
            Integer: 1
          Node Type: EXPRESSION (1)
            Integer: 2
        }
Expected instructions:
0000 OP_CONSTANT 0
0003 OP_CONSTANT 1
0006 OP_CONSTANT 2
0009 OP_CONSTANT 3
0012 OP_CONSTANT 4
0015 OP_CONSTANT 5
0018 OP_HASH 6
0021 OPPOP
Actual instructions:
0000 OP_CONSTANT 0
0003 OP_CONSTANT 1
0006 OP_CONSTANT 2
0009 OP_CONSTANT 3
0012 OP_CONSTANT 4
0015 OP_CONSTANT 5
0018 OP_HASH 6
0021 OPPOP
* Testing Instructions
* Testing Constant Pool
Testing Integer Object: 1
Testing Integer Object: 2
Testing Integer Object: 3
Testing Integer Object: 4
Testing Integer Object: 5
Testing Integer Object: 6
/home/dgood/Projects/C/compiler/test/compiler_tests.c:1241:test_hash_literal_with_constants:PASS
Testing hash literal with expressions: {1: 2 + 3, 4: 5 * 6}
----------------------------------------------------------------------------------------------------
** Testing compilation for {1: 2 + 3, 4: 5 * 6}
Node Type: PROGRAM
  Node Type: STATEMENT (EXPRESSION_STATEMENT)
    Expression:
      Node Type: EXPRESSION (11)
        HASH_LITERAL: {
          Node Type: EXPRESSION (1)
            Integer: 1
          Node Type: EXPRESSION (4)
            Operator: +
            Left:
              Node Type: EXPRESSION (1)
                Integer: 2
            Right:
              Node Type: EXPRESSION (1)
                Integer: 3
          Node Type: EXPRESSION (1)
            Integer: 4
          Node Type: EXPRESSION (4)
            Operator: *
            Left:
              Node Type: EXPRESSION (1)
                Integer: 5
            Right:
              Node Type: EXPRESSION (1)
                Integer: 6
        }
Expected instructions:
0000 OP_CONSTANT 0
0003 OP_CONSTANT 1
0006 OP_CONSTANT 2
0009 OP_ADD
0010 OP_CONSTANT 3
0013 OP_CONSTANT 4
0016 OP_CONSTANT 5
0019 OP_MUL
0020 OP_HASH 4
0023 OPPOP
Actual instructions:
0000 OP_CONSTANT 0
0003 OP_CONSTANT 1
0006 OP_CONSTANT 2
0009 OP_ADD
0010 OP_CONSTANT 3
0013 OP_CONSTANT 4
0016 OP_CONSTANT 5
0019 OP_MUL
0020 OP_HASH 4
0023 OPPOP
* Testing Instructions
* Testing Constant Pool
Testing Integer Object: 1
Testing Integer Object: 2
Testing Integer Object: 3
Testing Integer Object: 4
Testing Integer Object: 5
Testing Integer Object: 6
/home/dgood/Projects/C/compiler/test/compiler_tests.c:1242:test_hash_literal_with_expressions:PASS
Testing array index expression: [1, 2, 3][1 + 2]
----------------------------------------------------------------------------------------------------
** Testing compilation for [1, 2, 3][1 + 2]
Node Type: PROGRAM
  Node Type: STATEMENT (EXPRESSION_STATEMENT)
    Expression:
      Node Type: EXPRESSION (10)
        INDEX_EXPRESSION: {
          Left:           Node Type: EXPRESSION (9)
            ARRAY_LITERAL: [              Node Type: EXPRESSION (1)
                Integer: 1
            ,               Node Type: EXPRESSION (1)
                Integer: 2
            ,               Node Type: EXPRESSION (1)
                Integer: 3
            ]
          Index:           Node Type: EXPRESSION (4)
            Operator: +
            Left:
              Node Type: EXPRESSION (1)
                Integer: 1
            Right:
              Node Type: EXPRESSION (1)
                Integer: 2
        }
Expected instructions:
0000 OP_CONSTANT 0
0003 OP_CONSTANT 1
0006 OP_CONSTANT 2
0009 OP_ARRAY 3
0012 OP_CONSTANT 3
0015 OP_CONSTANT 4
0018 OP_ADD
0019 OP_INDEX
0020 OPPOP
Actual instructions:
0000 OP_CONSTANT 0
0003 OP_CONSTANT 1
0006 OP_CONSTANT 2
0009 OP_ARRAY 3
0012 OP_CONSTANT 3
0015 OP_CONSTANT 4
0018 OP_ADD
0019 OP_INDEX
0020 OPPOP
* Testing Instructions
* Testing Constant Pool
Testing Integer Object: 1
Testing Integer Object: 2
Testing Integer Object: 3
Testing Integer Object: 1
Testing Integer Object: 2
/home/dgood/Projects/C/compiler/test/compiler_tests.c:1243:test_array_index_expression:PASS
Testing hash index expression: {1: 2}[2 - 1]
----------------------------------------------------------------------------------------------------
** Testing compilation for {1: 2}[2 - 1]
Node Type: PROGRAM
  Node Type: STATEMENT (EXPRESSION_STATEMENT)
    Expression:
      Node Type: EXPRESSION (10)
        INDEX_EXPRESSION: {
          Left:           Node Type: EXPRESSION (11)
            HASH_LITERAL: {
              Node Type: EXPRESSION (1)
                Integer: 1
              Node Type: EXPRESSION (1)
                Integer: 2
            }
          Index:           Node Type: EXPRESSION (4)
            Operator: -
            Left:
              Node Type: EXPRESSION (1)
                Integer: 2
            Right:
              Node Type: EXPRESSION (1)
                Integer: 1
        }
Expected instructions:
0000 OP_CONSTANT 0
0003 OP_CONSTANT 1
0006 OP_HASH 2
0009 OP_CONSTANT 2
0012 OP_CONSTANT 3
0015 OP_SUB
0016 OP_INDEX
0017 OPPOP
Actual instructions:
0000 OP_CONSTANT 0
0003 OP_CONSTANT 1
0006 OP_HASH 2
0009 OP_CONSTANT 2
0012 OP_CONSTANT 3
0015 OP_SUB
0016 OP_INDEX
0017 OPPOP
* Testing Instructions
* Testing Constant Pool
Testing Integer Object: 1
Testing Integer Object: 2
Testing Integer Object: 2
Testing Integer Object: 1
/home/dgood/Projects/C/compiler/test/compiler_tests.c:1244:test_hash_index_expression:PASS
Testing compiler scopes
----------------------------------------------------------------------------------------------------
/home/dgood/Projects/C/compiler/test/compiler_tests.c:1245:test_compiler_scopes:PASS
Testing simple recursive function
----------------------------------------------------------------------------------------------------
** Testing compilation for let countDown = fn(x) { countDown(x - 1); }; countDown(1)
Node Type: PROGRAM
  Node Type: STATEMENT (LET_STATEMENT)
    Name:
      Node Type: EXPRESSION (0)
        Identifier: countDown
    Value:
      Node Type: EXPRESSION (7)
        FUNCTION_LITERAL: {
          Name: countDown
          Parameters:
            x
          Body:
            Node Type: STATEMENT (BLOCK_STATEMENT)
              Node Type: STATEMENT (EXPRESSION_STATEMENT)
                Expression:
                  Node Type: EXPRESSION (8)
                    CALL_EXPRESSION: {
                      Function:                       Node Type: EXPRESSION (0)
                        Identifier: countDown
                      Arguments:
                        Node Type: EXPRESSION (4)
                          Operator: -
                          Left:
                            Node Type: EXPRESSION (0)
                              Identifier: x
                          Right:
                            Node Type: EXPRESSION (1)
                              Integer: 1
                    }
        }
  Node Type: STATEMENT (EXPRESSION_STATEMENT)
    Expression:
      Node Type: EXPRESSION (8)
        CALL_EXPRESSION: {
          Function:           Node Type: EXPRESSION (0)
            Identifier: countDown
          Arguments:
            Node Type: EXPRESSION (1)
              Integer: 1
        }
Expected instructions:
0000 OP_CLOSURE 1 1
0004 OP_SET_GLOBAL 0
0007 OP_GET_GLOBAL 0
0010 OP_CONSTANT 2
0013 OP_CALL 1
0015 OPPOP
Actual instructions:
0000 OP_CLOSURE 0 0
0004 OP_SET_GLOBAL 0
0007 OP_GET_GLOBAL 0
0010 OP_CALL 1
0012 OPPOP
/home/dgood/Projects/C/compiler/test/compiler_tests.c:1087:test_simple_recursive_function:FAIL: Expected '0000 OP_CLOSURE 1 1\n0004 OP_SET_GLOBAL 0\n0007 OP_GET_GLOBAL 0\n0010 OP_CONSTANT 2\n0013 OP_CALL 1\n0015 OPPOP' Was '0000 OP_CLOSURE 0 0\n0004 OP_SET_GLOBAL 0\n0007 OP_GET_GLOBAL 0\n0010 OP_CALL 1\n0012 OPPOP'
Testing nested recursive function in wrapper
----------------------------------------------------------------------------------------------------
** Testing compilation for let wrapper = fn() {
   let countDown = fn(x) {
       countDown(x - 1);
   };
   countDown(1);
   }
wrapper();
Node Type: PROGRAM
  Node Type: STATEMENT (LET_STATEMENT)
    Name:
 