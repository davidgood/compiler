# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "*" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: test

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    container:
      image: fedora

    steps:
      - uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          dnf update -y && dnf install -y cmake gcc valgrind g++

      - name: Create build directory
        run: mkdir -p build

      - name: Configure CMake
        run: cmake -B ${{github.workspace}}/build -DTARGET_GROUP=${{env.BUILD_TYPE}} -DCMAKE_C_STANDARD=23

      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: Test
        working-directory: ${{github.workspace}}/build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C ${{env.BUILD_TYPE}}

      - name: Run tests with Valgrind
        working-directory: build
        run: |
          for test_executable in $(ctest -N | grep 'Test #' | awk -F ': ' '{print $2}'); do
            valgrind --leak-check=full --error-exitcode=1 ./test/${test_executable}
          done