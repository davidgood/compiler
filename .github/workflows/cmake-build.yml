name: CMake with Coverage

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "*" ]

env:
  BUILD_TYPE: Debug
  TARGET_GROUP: test

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: fedora

    steps:
      # Checkout repository
      - uses: actions/checkout@v4

      # Install Dependencies
      - name: Install Dependencies
        run: |
          dnf install -y cmake gcc gcov lcov g++ valgrind

      # Create Build Directory
      - name: Create Build Directory
        run: mkdir -p build

      # Configure CMake
      - name: Configure CMake
        run: |
          cmake -B build \
                -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
                -DTARGET_GROUP=${{env.TARGET_GROUP}} \
                -DCMAKE_C_STANDARD=23 \
                -DCMAKE_C_FLAGS="--coverage" \
                -DCMAKE_EXE_LINKER_FLAGS="--coverage"

      # Build
      - name: Build
        run: cmake --build build --config ${{env.BUILD_TYPE}}

      # Run Tests and Generate Coverage Data
      - name: Run CTest
        working-directory: build
        run: ctest --output-on-failure > ctest_results.txt

      # Capture Coverage Data
      - name: Capture Coverage Data
        working-directory: build
        run: |
          lcov --capture --directory . --output-file coverage.info
          lcov --list coverage.info

      # Generate HTML Coverage Report
      - name: Generate HTML Coverage Report
        working-directory: build
        run: genhtml coverage.info --output-directory coverage_html

      # Upload Coverage Reports
      - name: Upload Coverage Reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: build/coverage_html

      # Upload CTest Results
      - name: Upload CTest Results
        uses: actions/upload-artifact@v4
        with:
          name: ctest-results
          path: build/ctest_results.txt

      # Run Tests with Valgrind
      - name: Run Tests with Valgrind
        working-directory: build
        run: |
          for test_executable in $(ctest -N | grep 'Test #' | awk -F ': ' '{print $2}'); do
            valgrind --leak-check=full --error-exitcode=1 ./bin/${test_executable}
          done

  analyze:
    name: Analyze CodeQL
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: c

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2